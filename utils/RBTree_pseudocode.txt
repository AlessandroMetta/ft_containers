
insertion on value
    search for the null_leaf that can host the value
    since the color of the new node is red by default, check the color of the parent
        if is black, the tree is balanced
        else (is red), check on the uncle color
            if is red, you have to flip the colors of G, U and P
            else is black, check the paths
                if N is P->left_child and P is G->left_child, do a right_rotation
                if N is P->left_child and P is G->right_child, do a right_rotation
                if N is P->right_child and P is G->left_child, do a left_rotation
                if N is P->right_child and P is G->right_child, do a left_rotation

delete on value
    search for value in the tree
    when found (call it N)
        if has both null_leaf child, remove it (assign to the parent dir null_leaf) 
        if has only the left child, 
            set the parent of the deleted node to left child of the deleted node 
            (COLOR?)
        if has only the right child, 
            set the parent of the deleted node to right child of the deleted node 
            (COLOR?)
        if N has both the children,
            search for the largest node in the left subtree
            assign it to the node to remove
            then delete the node whose value we copied
            if the deleted node (whose value we copied) was red, no rebalance needed
            else (was black), coloring child of the deleted node black